{"version":3,"file":"passwordlessclient.min.js","sources":["../src/main.js"],"sourcesContent":["ï»¿/**\r\n * A client for the https://passwordless.dev API that allows webdevelopers to add WebAuthn with minimal coding.\r\n *\r\n * @export\r\n * @class PasswordlessClient\r\n */\r\nclass PasswordlessClient {\r\n    config = {\r\n        apiUrl: \"https://api.passwordless.dev/\",\r\n        apiKey: \"\",\r\n        Origin: location.origin,\r\n        RPID: location.hostname,\r\n        useHints: \"cookie\"\r\n    }\r\n    constructor(config) {\r\n        this.config = { ...this.config, ...config }\r\n    }\r\n\r\n    /**\r\n     * Register a new credential to a user\r\n     *\r\n     * @param {*} token Token generated by your backend and the passwordless api.\r\n     * @memberof PasswordlessClient\r\n     */\r\n    async register(token) {\r\n        checkSupport();\r\n        let options;\r\n        let session;\r\n\r\n        try {\r\n            var { data, sessionId } = await this.registerBegin(token);\r\n            options = data;\r\n            session = sessionId;\r\n\r\n        } catch (e) {\r\n            console.error(\"Failed during register/begin\");\r\n            throw e;\r\n        }\r\n\r\n        // Turn the challenge back into the accepted format of padded base64\r\n        options.challenge = coerceToArrayBuffer(options.challenge);\r\n        // Turn ID into a UInt8Array Buffer for some reason\r\n        options.user.id = coerceToArrayBuffer(options.user.id);\r\n\r\n        options.excludeCredentials = options.excludeCredentials.map((c) => {\r\n            c.id = coerceToArrayBuffer(c.id);\r\n            return c;\r\n        });\r\n\r\n        if (options.authenticatorSelection.authenticatorAttachment === null) options.authenticatorSelection.authenticatorAttachment = undefined;\r\n\r\n        let newCredential;\r\n        try {\r\n            newCredential = await navigator.credentials.create({\r\n                publicKey: options\r\n            });\r\n        } catch (e) {\r\n            // todo friendlier and more helpful error detection\r\n            var msg = \"Failed during credentials.create in browser. One reason could be because the username is already registered with your authenticator. Please change username or authenticator.\"\r\n            console.warn(msg, e);\r\n            throw e;\r\n        }\r\n\r\n        try {\r\n            await this.registerComplete(newCredential, session);\r\n            this.setHint(\"hint-passwordless\");\r\n        } catch (e) {\r\n            console.warn(\"Failed during register/complete\", e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal function\r\n     */\r\n    async registerBegin(token) {\r\n        const response = await fetch(this.config.apiUrl + 'register/begin', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                token: token,\r\n                ...this._params()\r\n            }),\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                \"Content-Type\": \"application/json\",\r\n                'ApiKey': this.config.apiKey\r\n            }\r\n        });\r\n\r\n        let data = await response.json();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Internal function\r\n     */\r\n    async registerComplete(newCredential, sessionId) {\r\n\r\n        // Move data into Arrays incase it is super long\r\n        let attestationObject = new Uint8Array(newCredential.response.attestationObject);\r\n        let clientDataJSON = new Uint8Array(newCredential.response.clientDataJSON);\r\n        let rawId = new Uint8Array(newCredential.rawId);\r\n\r\n        const data = {\r\n            id: newCredential.id,\r\n            rawId: coerceToBase64Url(rawId),\r\n            type: newCredential.type,\r\n            extensions: newCredential.getClientExtensionResults(),\r\n            response: {\r\n                AttestationObject: coerceToBase64Url(attestationObject),\r\n                clientDataJson: coerceToBase64Url(clientDataJSON)\r\n            }\r\n        };\r\n\r\n        const response = await fetch(this.config.apiUrl + 'register/complete', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                response: data,\r\n                sessionId, sessionId,\r\n                ...this._params()\r\n            }),\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                \"Content-Type\": \"application/json\",\r\n                'ApiKey': this.config.apiKey\r\n            }\r\n        });\r\n\r\n        if (response.status === 200) {\r\n            this.setHint(\"hint-passwordless\");\r\n        }\r\n\r\n        return await response.json();\r\n    }\r\n\r\n    /**\r\n     * Sign in a user\r\n     *\r\n     * @param {*} username\r\n     * @returns\r\n     * @memberof PasswordlessClient\r\n     */\r\n    async signin(username) {\r\n        checkSupport();\r\n        var options, sessionId;\r\n        try {\r\n            ({ data: options, sessionId } = await this.signinBegin(username));\r\n        } catch (e) {\r\n            console.warn(\"Failed during signin/begin\", e);\r\n            throw e;\r\n        }\r\n\r\n        options.challenge = coerceToArrayBuffer(options.challenge); //const challenge = makeAssertionOptions.challenge.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n        options.allowCredentials.forEach(function (listItem) {\r\n            listItem.id = coerceToArrayBuffer(listItem.id);\r\n        });\r\n\r\n        let credential;\r\n        try {\r\n            credential = await navigator.credentials.get({ publicKey: options })\r\n        } catch (e) {\r\n            console.warn(\"Failed during credentials.get in browser.\", e);\r\n            throw e;\r\n        }\r\n\r\n        try {\r\n            let response = await this.signinComplete(credential, sessionId);\r\n            return response.data;\r\n        } catch (e) {\r\n            console.warn(\"Failed during signin/complete\", e);\r\n            throw e;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Internal function\r\n     */\r\n    async signinBegin(username) {\r\n        var res = await fetch(this.config.apiUrl + \"signin/begin\", {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                username: username,\r\n                ...this._params(),\r\n            }),\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'ApiKey': this.config.apiKey\r\n            }\r\n        });\r\n\r\n        return await res.json();\r\n    }\r\n\r\n    /**\r\n     * Internal function\r\n     */\r\n    async signinComplete(credential, sessionId) {\r\n\r\n        // Move data into Arrays incase it is super long\r\n        let authData = new Uint8Array(credential.response.authenticatorData);\r\n        let clientDataJSON = new Uint8Array(credential.response.clientDataJSON);\r\n        let rawId = new Uint8Array(credential.rawId);\r\n        let sig = new Uint8Array(credential.response.signature);\r\n\r\n        const data = {\r\n            id: credential.id,\r\n            rawId: coerceToBase64Url(rawId),\r\n            type: credential.type,\r\n            extensions: credential.getClientExtensionResults(),\r\n            response: {\r\n                authenticatorData: coerceToBase64Url(authData),\r\n                clientDataJson: coerceToBase64Url(clientDataJSON),\r\n                signature: coerceToBase64Url(sig)\r\n            }\r\n        };\r\n\r\n        var response = await fetch(this.config.apiUrl + \"signin/complete\", {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                response: data,\r\n                sessionId: sessionId,\r\n                ...this._params(),\r\n            }),\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'ApiKey': this.config.apiKey\r\n            }\r\n        });\r\n\r\n        if (response.status === 200) {\r\n            this.setHint(\"hint-passwordless\");\r\n        }\r\n\r\n        return await response.json();\r\n    }\r\n\r\n    /**\r\n     * Internal function\r\n     */\r\n    _params() {\r\n        return {\r\n            RPID: this.config.RPID,\r\n            Origin: this.config.Origin\r\n        }\r\n    }\r\n\r\n    setHint(hint) {\r\n        if (this.config.useHints === \"cookie\") {\r\n            setCookie(hint, \"1\", 365);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns true if device has been used for passwordless signin before. False-negatives can occure since informatino is stored in cookies.\r\n     */\r\n    hasPasswordlessHint() {\r\n        if (this.config.useHints === \"cookie\") {\r\n            return getCookie(\"hint-passwordless\") === \"1\";\r\n        }\r\n    }\r\n}\r\n\r\nexport { PasswordlessClient as Client }\r\n\r\n\r\n/**\r\n* Returns true if the device has builtin \"platform\" authenticator (Windows Hello/faceid/fingerprint etc)\r\n*/\r\nexport async function isPlatformSupported() {\r\n    if (!isBrowserSupported()) {\r\n        return false;\r\n    }\r\n\r\n    return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\r\n}\r\n\r\nexport function isBrowserSupported() {\r\n    if (window.PublicKeyCredential === undefined ||\r\n        typeof window.PublicKeyCredential !== \"function\") {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction checkSupport() {\r\n    if (!isBrowserSupported()) {\r\n        throw new Error(\"WebAuthn and PublicKeyCredentials are not supported on this browser/device\");\r\n    }\r\n}\r\n\r\nconst coerceToArrayBuffer = function (thing) {\r\n    if (typeof thing === \"string\") {\r\n        // base64url to base64\r\n        thing = thing.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n        // base64 to Uint8Array\r\n        var str = window.atob(thing);\r\n        var bytes = new Uint8Array(str.length);\r\n        for (var i = 0; i < str.length; i++) {\r\n            bytes[i] = str.charCodeAt(i);\r\n        }\r\n        thing = bytes;\r\n    }\r\n\r\n    // Array to Uint8Array\r\n    if (Array.isArray(thing)) {\r\n        thing = new Uint8Array(thing);\r\n    }\r\n\r\n    // Uint8Array to ArrayBuffer\r\n    if (thing instanceof Uint8Array) {\r\n        thing = thing.buffer;\r\n    }\r\n\r\n    // error if none of the above worked\r\n    if (!(thing instanceof ArrayBuffer)) {\r\n        throw new TypeError(\"could not coerce to ArrayBuffer\");\r\n    }\r\n\r\n    return thing;\r\n};\r\n\r\nconst coerceToBase64Url = function (thing) {\r\n    // Array or ArrayBuffer to Uint8Array\r\n    if (Array.isArray(thing)) {\r\n        thing = Uint8Array.from(thing);\r\n    }\r\n\r\n    if (thing instanceof ArrayBuffer) {\r\n        thing = new Uint8Array(thing);\r\n    }\r\n\r\n    // Uint8Array to base64\r\n    if (thing instanceof Uint8Array) {\r\n        var str = \"\";\r\n        var len = thing.byteLength;\r\n\r\n        for (var i = 0; i < len; i++) {\r\n            str += String.fromCharCode(thing[i]);\r\n        }\r\n        thing = window.btoa(str);\r\n    }\r\n\r\n    if (typeof thing !== \"string\") {\r\n        throw new Error(\"could not coerce to string\");\r\n    }\r\n\r\n    // base64 to base64url\r\n    // NOTE: \"=\" at the end of challenge is optional, strip it off here\r\n    thing = thing.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=*$/g, \"\");\r\n\r\n    return thing;\r\n};\r\n\r\nconst setCookie = (name, value, days = 7, path = '/') => {\r\n    const expires = new Date(Date.now() + days * 864e5).toUTCString()\r\n    document.cookie = name + '=' + encodeURIComponent(value) + '; expires=' + expires + '; path=' + path\r\n}\r\n\r\nconst getCookie = (name) => {\r\n    return document.cookie.split('; ').reduce((r, v) => {\r\n        const parts = v.split('=')\r\n        return parts[0] === name ? decodeURIComponent(parts[1]) : r\r\n    }, '')\r\n}\r\n\r\nconst deleteCookie = (name, path) => {\r\n    setCookie(name, '', -1, path)\r\n}"],"names":["isBrowserSupported","undefined","window","PublicKeyCredential","checkSupport","Error","coerceToArrayBuffer","thing","replace","str","atob","bytes","Uint8Array","length","i","charCodeAt","Array","isArray","buffer","ArrayBuffer","TypeError","coerceToBase64Url","from","len","byteLength","String","fromCharCode","btoa","setCookie","name","value","days","path","expires","Date","now","toUTCString","document","cookie","encodeURIComponent","getCookie","split","reduce","r","v","parts","decodeURIComponent","[object Object]","apiUrl","apiKey","Origin","location","origin","RPID","hostname","useHints","config","this","token","options","session","newCredential","data","sessionId","registerBegin","e","console","error","challenge","user","id","excludeCredentials","map","c","authenticatorSelection","authenticatorAttachment","navigator","credentials","create","publicKey","warn","registerComplete","setHint","response","fetch","method","body","JSON","stringify","_params","headers","Accept","Content-Type","ApiKey","json","attestationObject","clientDataJSON","rawId","type","extensions","getClientExtensionResults","AttestationObject","clientDataJson","status","username","signinBegin","credential","allowCredentials","forEach","listItem","get","signinComplete","res","authData","authenticatorData","sig","signature","hint","async","isUserVerifyingPlatformAuthenticatorAvailable"],"mappings":"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"}