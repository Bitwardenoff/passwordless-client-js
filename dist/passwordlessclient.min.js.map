{"version":3,"file":"passwordlessclient.min.js","sources":["../src/main.js"],"sourcesContent":["ï»¿/**\r\n * A client for the https://passwordless.dev API that allows webdevelopers to add WebAuthn with minimal coding.\r\n *\r\n * @export\r\n * @class PasswordlessClient\r\n */\r\nclass PasswordlessClient {\r\n  config = {\r\n    apiUrl: \"https://api.passwordless.dev/\",\r\n    apiKey: \"\",\r\n    Origin: location.origin,\r\n    RPID: location.hostname,\r\n    useHints: \"cookie\",\r\n  };\r\n  constructor(config) {\r\n    this.config = { ...this.config, ...config };\r\n  }\r\n\r\n  /**\r\n   * Register a new credential to a user\r\n   *\r\n   * @param {*} token Token generated by your backend and the passwordless api.\r\n   * @memberof PasswordlessClient\r\n   */\r\n  async register(token) {\r\n    checkSupport();\r\n    let options;\r\n    let session;\r\n\r\n    try {\r\n      var { data, sessionId } = await this.registerBegin(token);\r\n      options = data;\r\n      session = sessionId;\r\n    } catch (e) {\r\n      console.error(\"Failed during register/begin\");\r\n      throw e;\r\n    }\r\n\r\n    // Turn the challenge back into the accepted format of padded base64\r\n    options.challenge = coerceToArrayBuffer(options.challenge);\r\n    // Turn ID into a UInt8Array Buffer for some reason\r\n    options.user.id = coerceToArrayBuffer(options.user.id);\r\n\r\n    options.excludeCredentials = options.excludeCredentials.map((c) => {\r\n      c.id = coerceToArrayBuffer(c.id);\r\n      return c;\r\n    });\r\n\r\n    if (options.authenticatorSelection.authenticatorAttachment === null)\r\n      options.authenticatorSelection.authenticatorAttachment = undefined;\r\n\r\n    let newCredential;\r\n    try {\r\n      newCredential = await navigator.credentials.create({\r\n        publicKey: options,\r\n      });\r\n    } catch (e) {\r\n      // todo friendlier and more helpful error detection\r\n      var msg =\r\n        \"Failed during credentials.create in browser. One reason could be because the username is already registered with your authenticator. Please change username or authenticator.\";\r\n      console.warn(msg, e);\r\n      throw e;\r\n    }\r\n\r\n    try {\r\n      await this.registerComplete(newCredential, session);\r\n      this.setHint(\"hint-passwordless\");\r\n    } catch (e) {\r\n      console.warn(\"Failed during register/complete\", e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async registerBegin(token) {\r\n    const response = await fetch(this.config.apiUrl + \"register/begin\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        token: token,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    let data = await response.json();\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async registerComplete(newCredential, sessionId) {\r\n    // Move data into Arrays incase it is super long\r\n    let attestationObject = new Uint8Array(\r\n      newCredential.response.attestationObject\r\n    );\r\n    let clientDataJSON = new Uint8Array(newCredential.response.clientDataJSON);\r\n    let rawId = new Uint8Array(newCredential.rawId);\r\n\r\n    const data = {\r\n      id: newCredential.id,\r\n      rawId: coerceToBase64Url(rawId),\r\n      type: newCredential.type,\r\n      extensions: newCredential.getClientExtensionResults(),\r\n      response: {\r\n        AttestationObject: coerceToBase64Url(attestationObject),\r\n        clientDataJson: coerceToBase64Url(clientDataJSON),\r\n      },\r\n    };\r\n\r\n    const response = await fetch(this.config.apiUrl + \"register/complete\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        response: data,\r\n        sessionId,\r\n        sessionId,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      this.setHint(\"hint-passwordless\");\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Sign in a user\r\n   *\r\n   * @param {*} username\r\n   * @returns\r\n   * @memberof PasswordlessClient\r\n   */\r\n  async signin(username) {\r\n    checkSupport();\r\n    var options, sessionId;\r\n    try {\r\n      ({ data: options, sessionId } = await this.signinBegin(username));\r\n    } catch (e) {\r\n      console.warn(\"Failed during signin/begin\", e);\r\n      throw e;\r\n    }\r\n\r\n    options.challenge = coerceToArrayBuffer(options.challenge); //const challenge = makeAssertionOptions.challenge.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n    options.allowCredentials.forEach(function (listItem) {\r\n      listItem.id = coerceToArrayBuffer(listItem.id);\r\n    });\r\n\r\n    let credential;\r\n    try {\r\n      credential = await navigator.credentials.get({ publicKey: options });\r\n    } catch (e) {\r\n      console.warn(\"Failed during credentials.get in browser.\", e);\r\n      throw e;\r\n    }\r\n\r\n    try {\r\n      let response = await this.signinComplete(credential, sessionId);\r\n      return response.data;\r\n    } catch (e) {\r\n      console.warn(\"Failed during signin/complete\", e);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async signinBegin(username) {\r\n    var res = await fetch(this.config.apiUrl + \"signin/begin\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        username: username,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    return await res.json();\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async signinComplete(credential, sessionId) {\r\n    // Move data into Arrays incase it is super long\r\n    let authData = new Uint8Array(credential.response.authenticatorData);\r\n    let clientDataJSON = new Uint8Array(credential.response.clientDataJSON);\r\n    let rawId = new Uint8Array(credential.rawId);\r\n    let sig = new Uint8Array(credential.response.signature);\r\n\r\n    const data = {\r\n      id: credential.id,\r\n      rawId: coerceToBase64Url(rawId),\r\n      type: credential.type,\r\n      extensions: credential.getClientExtensionResults(),\r\n      response: {\r\n        authenticatorData: coerceToBase64Url(authData),\r\n        clientDataJson: coerceToBase64Url(clientDataJSON),\r\n        signature: coerceToBase64Url(sig),\r\n      },\r\n    };\r\n\r\n    var response = await fetch(this.config.apiUrl + \"signin/complete\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        response: data,\r\n        sessionId: sessionId,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      this.setHint(\"hint-passwordless\");\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  _params() {\r\n    return {\r\n      RPID: this.config.RPID,\r\n      Origin: this.config.Origin,\r\n    };\r\n  }\r\n\r\n  setHint(hint) {\r\n    if (this.config.useHints === \"cookie\") {\r\n      setCookie(hint, \"1\", 365);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if device has been used for passwordless signin before. Treat information as hint and not a fact. False-negatives can happen since information is stored in cookies.\r\n   */\r\n  hasPasswordlessHint() {\r\n    if (this.config.useHints === \"cookie\") {\r\n      return getCookie(\"hint-passwordless\") === \"1\";\r\n    }\r\n  }\r\n}\r\n\r\nexport { PasswordlessClient as Client };\r\n\r\n/**\r\n * Returns true if the device has builtin \"platform\" authenticator (Windows Hello/faceid/fingerprint etc)\r\n */\r\nexport async function isPlatformSupported() {\r\n  if (!isBrowserSupported()) {\r\n    return false;\r\n  }\r\n\r\n  return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\r\n}\r\n\r\n/**\r\n * Returns true if the browser supports PublicKeyCredential\r\n */\r\nexport function isBrowserSupported() {\r\n  if (\r\n    window.PublicKeyCredential === undefined ||\r\n    typeof window.PublicKeyCredential !== \"function\"\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Throws if browser does not support PublicKeyCredential\r\n */\r\nfunction checkSupport() {\r\n  if (!isBrowserSupported()) {\r\n    throw new Error(\r\n      \"WebAuthn and PublicKeyCredentials are not supported on this browser/device\"\r\n    );\r\n  }\r\n}\r\n\r\nconst coerceToArrayBuffer = function (thing) {\r\n  if (typeof thing === \"string\") {\r\n    // base64url to base64\r\n    thing = thing.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n    // base64 to Uint8Array\r\n    var str = window.atob(thing);\r\n    var bytes = new Uint8Array(str.length);\r\n    for (var i = 0; i < str.length; i++) {\r\n      bytes[i] = str.charCodeAt(i);\r\n    }\r\n    thing = bytes;\r\n  }\r\n\r\n  // Array to Uint8Array\r\n  if (Array.isArray(thing)) {\r\n    thing = new Uint8Array(thing);\r\n  }\r\n\r\n  // Uint8Array to ArrayBuffer\r\n  if (thing instanceof Uint8Array) {\r\n    thing = thing.buffer;\r\n  }\r\n\r\n  // error if none of the above worked\r\n  if (!(thing instanceof ArrayBuffer)) {\r\n    throw new TypeError(\"could not coerce to ArrayBuffer\");\r\n  }\r\n\r\n  return thing;\r\n};\r\n\r\nconst coerceToBase64Url = function (thing) {\r\n  // Array or ArrayBuffer to Uint8Array\r\n  if (Array.isArray(thing)) {\r\n    thing = Uint8Array.from(thing);\r\n  }\r\n\r\n  if (thing instanceof ArrayBuffer) {\r\n    thing = new Uint8Array(thing);\r\n  }\r\n\r\n  // Uint8Array to base64\r\n  if (thing instanceof Uint8Array) {\r\n    var str = \"\";\r\n    var len = thing.byteLength;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n      str += String.fromCharCode(thing[i]);\r\n    }\r\n    thing = window.btoa(str);\r\n  }\r\n\r\n  if (typeof thing !== \"string\") {\r\n    throw new Error(\"could not coerce to string\");\r\n  }\r\n\r\n  // base64 to base64url\r\n  // NOTE: \"=\" at the end of challenge is optional, strip it off here\r\n  thing = thing.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=*$/g, \"\");\r\n\r\n  return thing;\r\n};\r\n\r\nconst setCookie = (name, value, days = 7, path = \"/\") => {\r\n  const expires = new Date(Date.now() + days * 864e5).toUTCString();\r\n  document.cookie =\r\n    name +\r\n    \"=\" +\r\n    encodeURIComponent(value) +\r\n    \"; expires=\" +\r\n    expires +\r\n    \"; path=\" +\r\n    path;\r\n};\r\n\r\nconst getCookie = (name) => {\r\n  return document.cookie.split(\"; \").reduce((r, v) => {\r\n    const parts = v.split(\"=\");\r\n    return parts[0] === name ? decodeURIComponent(parts[1]) : r;\r\n  }, \"\");\r\n};\r\n\r\nconst deleteCookie = (name, path) => {\r\n  setCookie(name, \"\", -1, path);\r\n};\r\n"],"names":["isBrowserSupported","undefined","window","PublicKeyCredential","checkSupport","Error","coerceToArrayBuffer","thing","replace","str","atob","bytes","Uint8Array","length","i","charCodeAt","Array","isArray","buffer","ArrayBuffer","TypeError","coerceToBase64Url","from","len","byteLength","String","fromCharCode","btoa","setCookie","name","value","days","path","expires","Date","now","toUTCString","document","cookie","encodeURIComponent","getCookie","split","reduce","r","v","parts","decodeURIComponent","[object Object]","apiUrl","apiKey","Origin","location","origin","RPID","hostname","useHints","config","this","token","options","session","newCredential","data","sessionId","registerBegin","e","console","error","challenge","user","id","excludeCredentials","map","c","authenticatorSelection","authenticatorAttachment","navigator","credentials","create","publicKey","warn","registerComplete","setHint","response","fetch","method","body","JSON","stringify","_params","headers","Accept","Content-Type","ApiKey","json","attestationObject","clientDataJSON","rawId","type","extensions","getClientExtensionResults","AttestationObject","clientDataJson","status","username","signinBegin","credential","allowCredentials","forEach","listItem","get","signinComplete","res","authData","authenticatorData","sig","signature","hint","async","isUserVerifyingPlatformAuthenticatorAvailable"],"mappings":"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"}