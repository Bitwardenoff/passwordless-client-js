class e{config={apiUrl:"https://api.passwordless.dev/",apiKey:"",Origin:location.origin,RPID:location.hostname};constructor(e){this.config={...this.config,...e}}static async isEnabledOnDevice(){return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()}static isSupportedByBrowser(){return void 0!==window.PublicKeyCredential&&"function"==typeof window.PublicKeyCredential}CheckSupport(){if(!e.isSupportedByBrowser())throw new Error("WebAuthn and PublicKeyCredentials are not supported on this browser/device")}async register(e){let r,t,i;this.CheckSupport();try{var{data:n,sessionId:a}=await this.registerBegin(e);r=n,t=a}catch(e){throw console.error("Failed during register/begin"),e}r.challenge=coerceToArrayBuffer(r.challenge),r.user.id=coerceToArrayBuffer(r.user.id),r.excludeCredentials=r.excludeCredentials.map(e=>(e.id=coerceToArrayBuffer(e.id),e)),null===r.authenticatorSelection.authenticatorAttachment&&(r.authenticatorSelection.authenticatorAttachment=void 0);try{i=await navigator.credentials.create({publicKey:r})}catch(e){throw console.warn("Failed during credentials.create in browser. One reason could be because the username is already registered with your authenticator. Please change username or authenticator.",e),e}try{await this.registerComplete(i,t)}catch(e){console.warn("Failed during register/complete",e)}}async registerBegin(e){const r=await fetch(this.config.apiUrl+"register/begin",{method:"POST",body:JSON.stringify({token:e,...this._params()}),headers:{Accept:"application/json","Content-Type":"application/json",ApiKey:this.config.apiKey}});return await r.json()}async registerComplete(e,r){let t=new Uint8Array(e.response.attestationObject),i=new Uint8Array(e.response.clientDataJSON),n=new Uint8Array(e.rawId);const a={id:e.id,rawId:coerceToBase64Url(n),type:e.type,extensions:e.getClientExtensionResults(),response:{AttestationObject:coerceToBase64Url(t),clientDataJson:coerceToBase64Url(i)}},o=await fetch(this.config.apiUrl+"register/complete",{method:"POST",body:JSON.stringify({response:a,sessionId:r,sessionId:r,...this._params()}),headers:{Accept:"application/json","Content-Type":"application/json",ApiKey:this.config.apiKey}});return await o.json()}async signin(e){var r,t;this.CheckSupport();try{({data:r,sessionId:t}=await this.signinBegin(e))}catch(e){throw console.warn("Failed during signin/begin",e),e}let i;r.challenge=coerceToArrayBuffer(r.challenge),r.allowCredentials.forEach((function(e){e.id=coerceToArrayBuffer(e.id)}));try{i=await navigator.credentials.get({publicKey:r})}catch(e){throw console.warn("Failed during credentials.get in browser.",e),e}try{return(await this.signinComplete(i,t)).data}catch(e){throw console.warn("Failed during signin/complete",e),e}}async signinBegin(e){var r=await fetch(this.config.apiUrl+"signin/begin",{method:"POST",body:JSON.stringify({username:e,...this._params()}),headers:{Accept:"application/json",ApiKey:this.config.apiKey}});return await r.json()}async signinComplete(e,r){let t=new Uint8Array(e.response.authenticatorData),i=new Uint8Array(e.response.clientDataJSON),n=new Uint8Array(e.rawId),a=new Uint8Array(e.response.signature);const o={id:e.id,rawId:coerceToBase64Url(n),type:e.type,extensions:e.getClientExtensionResults(),response:{authenticatorData:coerceToBase64Url(t),clientDataJson:coerceToBase64Url(i),signature:coerceToBase64Url(a)}};var s=await fetch(this.config.apiUrl+"signin/complete",{method:"POST",body:JSON.stringify({response:o,sessionId:r,...this._params()}),headers:{Accept:"application/json",ApiKey:this.config.apiKey}});return await s.json()}_params(){return{RPID:this.config.RPID,Origin:this.config.Origin}}}coerceToArrayBuffer=function(e){if("string"==typeof e){e=e.replace(/-/g,"+").replace(/_/g,"/");for(var r=window.atob(e),t=new Uint8Array(r.length),i=0;i<r.length;i++)t[i]=r.charCodeAt(i);e=t}if(Array.isArray(e)&&(e=new Uint8Array(e)),e instanceof Uint8Array&&(e=e.buffer),!(e instanceof ArrayBuffer))throw new TypeError("could not coerce to ArrayBuffer");return e},coerceToBase64Url=function(e){if(Array.isArray(e)&&(e=Uint8Array.from(e)),e instanceof ArrayBuffer&&(e=new Uint8Array(e)),e instanceof Uint8Array){for(var r="",t=e.byteLength,i=0;i<t;i++)r+=String.fromCharCode(e[i]);e=window.btoa(r)}if("string"!=typeof e)throw new Error("could not coerce to string");return e=e.replace(/\+/g,"-").replace(/\//g,"_").replace(/=*$/g,"")};export{e as PasswordlessClient};
//# sourceMappingURL=passwordlessclient.min.mjs.map
