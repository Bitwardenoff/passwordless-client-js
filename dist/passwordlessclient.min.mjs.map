{"version":3,"file":"passwordlessclient.min.mjs","sources":["../src/main.js"],"sourcesContent":["ï»¿/**\r\n * A client for the https://passwordless.dev API that allows webdevelopers to add WebAuthn with minimal coding.\r\n *\r\n * @export\r\n * @class PasswordlessClient\r\n */\r\nclass PasswordlessClient {\r\n  config = {\r\n    apiUrl: \"https://api.passwordless.dev/\",\r\n    apiKey: \"\",\r\n    Origin: location.origin,\r\n    RPID: location.hostname,\r\n    useHints: \"cookie\",\r\n  };\r\n  constructor(config) {\r\n    this.config = { ...this.config, ...config };\r\n  }\r\n\r\n  /**\r\n   * Register a new credential to a user\r\n   *\r\n   * @param {*} token Token generated by your backend and the passwordless api.\r\n   * @memberof PasswordlessClient\r\n   */\r\n  async register(token) {\r\n    checkSupport();\r\n    let options;\r\n    let session;\r\n\r\n    try {\r\n      var { data, sessionId } = await this.registerBegin(token);\r\n      options = data;\r\n      session = sessionId;\r\n    } catch (e) {\r\n      console.error(\"Failed during register/begin\");\r\n      throw e;\r\n    }\r\n\r\n    // Turn the challenge back into the accepted format of padded base64\r\n    options.challenge = coerceToArrayBuffer(options.challenge);\r\n    // Turn ID into a UInt8Array Buffer for some reason\r\n    options.user.id = coerceToArrayBuffer(options.user.id);\r\n\r\n    options.excludeCredentials = options.excludeCredentials.map((c) => {\r\n      c.id = coerceToArrayBuffer(c.id);\r\n      return c;\r\n    });\r\n\r\n    if (options.authenticatorSelection.authenticatorAttachment === null)\r\n      options.authenticatorSelection.authenticatorAttachment = undefined;\r\n\r\n    let newCredential;\r\n    try {\r\n      newCredential = await navigator.credentials.create({\r\n        publicKey: options,\r\n      });\r\n    } catch (e) {\r\n      // todo friendlier and more helpful error detection\r\n      var msg =\r\n        \"Failed during credentials.create in browser. One reason could be because the username is already registered with your authenticator. Please change username or authenticator.\";\r\n      console.warn(msg, e);\r\n      throw e;\r\n    }\r\n\r\n    try {\r\n      await this.registerComplete(newCredential, session);\r\n      this.setHint(\"hint-passwordless\");\r\n    } catch (e) {\r\n      console.warn(\"Failed during register/complete\", e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async registerBegin(token) {\r\n    const response = await fetch(this.config.apiUrl + \"register/begin\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        token: token,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    let data = await response.json();\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async registerComplete(newCredential, sessionId) {\r\n    // Move data into Arrays incase it is super long\r\n    let attestationObject = new Uint8Array(\r\n      newCredential.response.attestationObject\r\n    );\r\n    let clientDataJSON = new Uint8Array(newCredential.response.clientDataJSON);\r\n    let rawId = new Uint8Array(newCredential.rawId);\r\n\r\n    const data = {\r\n      id: newCredential.id,\r\n      rawId: coerceToBase64Url(rawId),\r\n      type: newCredential.type,\r\n      extensions: newCredential.getClientExtensionResults(),\r\n      response: {\r\n        AttestationObject: coerceToBase64Url(attestationObject),\r\n        clientDataJson: coerceToBase64Url(clientDataJSON),\r\n      },\r\n    };\r\n\r\n    const response = await fetch(this.config.apiUrl + \"register/complete\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        response: data,\r\n        sessionId,\r\n        sessionId,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      this.setHint(\"hint-passwordless\");\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Sign in a user\r\n   *\r\n   * @param {*} username\r\n   * @returns\r\n   * @memberof PasswordlessClient\r\n   */\r\n  async signin(username) {\r\n    checkSupport();\r\n    var options, sessionId;\r\n    try {\r\n      ({ data: options, sessionId } = await this.signinBegin(username));\r\n    } catch (e) {\r\n      console.warn(\"Failed during signin/begin\", e);\r\n      throw e;\r\n    }\r\n\r\n    options.challenge = coerceToArrayBuffer(options.challenge); //const challenge = makeAssertionOptions.challenge.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n    options.allowCredentials.forEach(function (listItem) {\r\n      listItem.id = coerceToArrayBuffer(listItem.id);\r\n    });\r\n\r\n    let credential;\r\n    try {\r\n      credential = await navigator.credentials.get({ publicKey: options });\r\n    } catch (e) {\r\n      console.warn(\"Failed during credentials.get in browser.\", e);\r\n      throw e;\r\n    }\r\n\r\n    try {\r\n      let response = await this.signinComplete(credential, sessionId);\r\n      return response.data;\r\n    } catch (e) {\r\n      console.warn(\"Failed during signin/complete\", e);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async signinBegin(username) {\r\n    var res = await fetch(this.config.apiUrl + \"signin/begin\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        username: username,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    return await res.json();\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async signinComplete(credential, sessionId) {\r\n    // Move data into Arrays incase it is super long\r\n    let authData = new Uint8Array(credential.response.authenticatorData);\r\n    let clientDataJSON = new Uint8Array(credential.response.clientDataJSON);\r\n    let rawId = new Uint8Array(credential.rawId);\r\n    let sig = new Uint8Array(credential.response.signature);\r\n\r\n    const data = {\r\n      id: credential.id,\r\n      rawId: coerceToBase64Url(rawId),\r\n      type: credential.type,\r\n      extensions: credential.getClientExtensionResults(),\r\n      response: {\r\n        authenticatorData: coerceToBase64Url(authData),\r\n        clientDataJson: coerceToBase64Url(clientDataJSON),\r\n        signature: coerceToBase64Url(sig),\r\n      },\r\n    };\r\n\r\n    var response = await fetch(this.config.apiUrl + \"signin/complete\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        response: data,\r\n        sessionId: sessionId,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      this.setHint(\"hint-passwordless\");\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  _params() {\r\n    return {\r\n      RPID: this.config.RPID,\r\n      Origin: this.config.Origin,\r\n    };\r\n  }\r\n\r\n  setHint(hint) {\r\n    if (this.config.useHints === \"cookie\") {\r\n      setCookie(hint, \"1\", 365);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if device has been used for passwordless signin before. Treat information as hint and not a fact. False-negatives can happen since information is stored in cookies.\r\n   */\r\n  hasPasswordlessHint() {\r\n    if (this.config.useHints === \"cookie\") {\r\n      return getCookie(\"hint-passwordless\") === \"1\";\r\n    }\r\n  }\r\n}\r\n\r\nexport { PasswordlessClient as Client };\r\n\r\n/**\r\n * Returns true if the device has builtin \"platform\" authenticator (Windows Hello/faceid/fingerprint etc)\r\n */\r\nexport async function isPlatformSupported() {\r\n  if (!isBrowserSupported()) {\r\n    return false;\r\n  }\r\n\r\n  return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\r\n}\r\n\r\n/**\r\n * Returns true if the browser supports PublicKeyCredential\r\n */\r\nexport function isBrowserSupported() {\r\n  if (\r\n    window.PublicKeyCredential === undefined ||\r\n    typeof window.PublicKeyCredential !== \"function\"\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Throws if browser does not support PublicKeyCredential\r\n */\r\nfunction checkSupport() {\r\n  if (!isBrowserSupported()) {\r\n    throw new Error(\r\n      \"WebAuthn and PublicKeyCredentials are not supported on this browser/device\"\r\n    );\r\n  }\r\n}\r\n\r\nconst coerceToArrayBuffer = function (thing) {\r\n  if (typeof thing === \"string\") {\r\n    // base64url to base64\r\n    thing = thing.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n    // base64 to Uint8Array\r\n    var str = window.atob(thing);\r\n    var bytes = new Uint8Array(str.length);\r\n    for (var i = 0; i < str.length; i++) {\r\n      bytes[i] = str.charCodeAt(i);\r\n    }\r\n    thing = bytes;\r\n  }\r\n\r\n  // Array to Uint8Array\r\n  if (Array.isArray(thing)) {\r\n    thing = new Uint8Array(thing);\r\n  }\r\n\r\n  // Uint8Array to ArrayBuffer\r\n  if (thing instanceof Uint8Array) {\r\n    thing = thing.buffer;\r\n  }\r\n\r\n  // error if none of the above worked\r\n  if (!(thing instanceof ArrayBuffer)) {\r\n    throw new TypeError(\"could not coerce to ArrayBuffer\");\r\n  }\r\n\r\n  return thing;\r\n};\r\n\r\nconst coerceToBase64Url = function (thing) {\r\n  // Array or ArrayBuffer to Uint8Array\r\n  if (Array.isArray(thing)) {\r\n    thing = Uint8Array.from(thing);\r\n  }\r\n\r\n  if (thing instanceof ArrayBuffer) {\r\n    thing = new Uint8Array(thing);\r\n  }\r\n\r\n  // Uint8Array to base64\r\n  if (thing instanceof Uint8Array) {\r\n    var str = \"\";\r\n    var len = thing.byteLength;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n      str += String.fromCharCode(thing[i]);\r\n    }\r\n    thing = window.btoa(str);\r\n  }\r\n\r\n  if (typeof thing !== \"string\") {\r\n    throw new Error(\"could not coerce to string\");\r\n  }\r\n\r\n  // base64 to base64url\r\n  // NOTE: \"=\" at the end of challenge is optional, strip it off here\r\n  thing = thing.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=*$/g, \"\");\r\n\r\n  return thing;\r\n};\r\n\r\nconst setCookie = (name, value, days = 7, path = \"/\") => {\r\n  const expires = new Date(Date.now() + days * 864e5).toUTCString();\r\n  document.cookie =\r\n    name +\r\n    \"=\" +\r\n    encodeURIComponent(value) +\r\n    \"; expires=\" +\r\n    expires +\r\n    \"; path=\" +\r\n    path;\r\n};\r\n\r\nconst getCookie = (name) => {\r\n  return document.cookie.split(\"; \").reduce((r, v) => {\r\n    const parts = v.split(\"=\");\r\n    return parts[0] === name ? decodeURIComponent(parts[1]) : r;\r\n  }, \"\");\r\n};\r\n\r\nconst deleteCookie = (name, path) => {\r\n  setCookie(name, \"\", -1, path);\r\n};\r\n"],"names":["PasswordlessClient","[object Object]","apiUrl","apiKey","Origin","location","origin","RPID","hostname","useHints","config","this","token","options","session","newCredential","checkSupport","data","sessionId","registerBegin","e","console","error","challenge","coerceToArrayBuffer","user","id","excludeCredentials","map","c","authenticatorSelection","authenticatorAttachment","undefined","navigator","credentials","create","publicKey","warn","registerComplete","setHint","response","fetch","method","body","JSON","stringify","_params","headers","Accept","Content-Type","ApiKey","json","attestationObject","Uint8Array","clientDataJSON","rawId","coerceToBase64Url","type","extensions","getClientExtensionResults","AttestationObject","clientDataJson","status","username","signinBegin","credential","allowCredentials","forEach","listItem","get","signinComplete","res","authData","authenticatorData","sig","signature","hint","setCookie","getCookie","async","isPlatformSupported","isBrowserSupported","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","window","Error","thing","replace","str","atob","bytes","length","i","charCodeAt","Array","isArray","buffer","ArrayBuffer","TypeError","from","len","byteLength","String","fromCharCode","btoa","name","value","days","path","expires","Date","now","toUTCString","document","cookie","encodeURIComponent","split","reduce","r","v","parts","decodeURIComponent"],"mappings":"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"}