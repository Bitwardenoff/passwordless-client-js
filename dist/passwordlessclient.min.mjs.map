{"version":3,"file":"passwordlessclient.min.mjs","sources":["../src/main.js"],"sourcesContent":["ï»¿/**\r\n * A client for the https://passwordless.dev API that allows webdevelopers to add WebAuthn with minimal coding.\r\n *\r\n * @export\r\n * @class PasswordlessClient\r\n */\r\nclass PasswordlessClient {\r\n  config = {\r\n    apiUrl: \"https://api.passwordless.dev/\",\r\n    apiKey: \"\",\r\n    Origin: location.origin,\r\n    RPID: location.hostname,\r\n  };\r\n  constructor(config) {\r\n    this.config = { ...this.config, ...config };\r\n  }\r\n\r\n  /**\r\n   * Register a new credential to a user\r\n   *\r\n   * @param {*} token Token generated by your backend and the passwordless api.\r\n   * @memberof PasswordlessClient\r\n   */\r\n  async register(token, regOptions) {\r\n    checkSupport();\r\n\r\n    const options ={\r\n        nickname: \"\",\r\n        ...regOptions\r\n    }\r\n\r\n    let fidoOptions;\r\n    let session;\r\n\r\n    try {\r\n      var { data, sessionId } = await this.registerBegin(token);\r\n      fidoOptions = data;\r\n      session = sessionId;\r\n    } catch (e) {\r\n      console.error(\"Failed during register/begin\");\r\n      throw e;\r\n    }\r\n\r\n    // Turn the challenge back into the accepted format of padded base64\r\n    fidoOptions.challenge = coerceToArrayBuffer(fidoOptions.challenge);\r\n    // Turn ID into a UInt8Array Buffer for some reason\r\n    fidoOptions.user.id = coerceToArrayBuffer(fidoOptions.user.id);\r\n\r\n    fidoOptions.excludeCredentials = fidoOptions.excludeCredentials.map((c) => {\r\n      c.id = coerceToArrayBuffer(c.id);\r\n      return c;\r\n    });\r\n\r\n    if (fidoOptions.authenticatorSelection.authenticatorAttachment === null)\r\n      fidoOptions.authenticatorSelection.authenticatorAttachment = undefined;\r\n\r\n    let newCredential;\r\n    try {\r\n      newCredential = await navigator.credentials.create({\r\n        publicKey: fidoOptions,\r\n      });\r\n    } catch (e) {\r\n      // todo friendlier and more helpful error detection\r\n      var msg =\r\n        \"Failed during credentials.create in browser. One reason could be because the username is already registered with your authenticator. Please change username or authenticator.\";\r\n      console.warn(msg, e);\r\n      throw e;\r\n    }\r\n\r\n    try {\r\n      await this.registerComplete(newCredential, session, options);\r\n    } catch (e) {\r\n      console.warn(\"Failed during register/complete\", e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async registerBegin(token) {\r\n    const response = await fetch(this.config.apiUrl + \"register/begin\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        token: token,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    let data = await response.json();\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async registerComplete(newCredential, sessionId, options) {\r\n    // Move data into Arrays incase it is super long\r\n    let attestationObject = new Uint8Array(\r\n      newCredential.response.attestationObject\r\n    );\r\n    let clientDataJSON = new Uint8Array(newCredential.response.clientDataJSON);\r\n    let rawId = new Uint8Array(newCredential.rawId);\r\n\r\n    const data = {\r\n      id: newCredential.id,\r\n      rawId: coerceToBase64Url(rawId),\r\n      type: newCredential.type,\r\n      extensions: newCredential.getClientExtensionResults(),\r\n      response: {\r\n        AttestationObject: coerceToBase64Url(attestationObject),\r\n        clientDataJson: coerceToBase64Url(clientDataJSON),\r\n      },\r\n    };\r\n\r\n    const response = await fetch(this.config.apiUrl + \"register/complete\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        response: data,\r\n        sessionId,\r\n        nickname: options.nickname,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Sign in a user\r\n   *\r\n   * @param {*} username\r\n   * @returns\r\n   * @memberof PasswordlessClient\r\n   */\r\n  async signin(username) {\r\n    checkSupport();\r\n    var options, sessionId;\r\n    try {\r\n      ({ data: options, sessionId } = await this.signinBegin(username));\r\n    } catch (e) {\r\n      console.warn(\"Failed during signin/begin\", e);\r\n      throw e;\r\n    }\r\n\r\n    options.challenge = coerceToArrayBuffer(options.challenge); //const challenge = makeAssertionOptions.challenge.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n    options.allowCredentials.forEach(function (listItem) {\r\n      listItem.id = coerceToArrayBuffer(listItem.id);\r\n    });\r\n\r\n    let credential;\r\n    try {\r\n      credential = await navigator.credentials.get({ publicKey: options });\r\n    } catch (e) {\r\n      console.warn(\"Failed during credentials.get in browser.\", e);\r\n      throw e;\r\n    }\r\n\r\n    try {\r\n      let response = await this.signinComplete(credential, sessionId);\r\n      return response.data;\r\n    } catch (e) {\r\n      console.warn(\"Failed during signin/complete\", e);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async signinBegin(username) {\r\n    var res = await fetch(this.config.apiUrl + \"signin/begin\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        username: username,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    return await res.json();\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  async signinComplete(credential, sessionId) {\r\n    // Move data into Arrays incase it is super long\r\n    let authData = new Uint8Array(credential.response.authenticatorData);\r\n    let clientDataJSON = new Uint8Array(credential.response.clientDataJSON);\r\n    let rawId = new Uint8Array(credential.rawId);\r\n    let sig = new Uint8Array(credential.response.signature);\r\n\r\n    const data = {\r\n      id: credential.id,\r\n      rawId: coerceToBase64Url(rawId),\r\n      type: credential.type,\r\n      extensions: credential.getClientExtensionResults(),\r\n      response: {\r\n        authenticatorData: coerceToBase64Url(authData),\r\n        clientDataJson: coerceToBase64Url(clientDataJSON),\r\n        signature: coerceToBase64Url(sig),\r\n      },\r\n    };\r\n\r\n    var response = await fetch(this.config.apiUrl + \"signin/complete\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        response: data,\r\n        sessionId: sessionId,\r\n        ...this._params(),\r\n      }),\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        ApiKey: this.config.apiKey,\r\n      },\r\n    });\r\n\r\n    return await response.json();\r\n  }\r\n\r\n  /**\r\n   * Internal function\r\n   */\r\n  _params() {\r\n    return {\r\n      RPID: this.config.RPID,\r\n      Origin: this.config.Origin,\r\n    };\r\n  }\r\n}\r\n\r\nexport { PasswordlessClient as Client };\r\n\r\n/**\r\n * Returns true if the device has builtin \"platform\" authenticator (Windows Hello/faceid/fingerprint etc)\r\n */\r\nexport async function isPlatformSupported() {\r\n  if (!isBrowserSupported()) {\r\n    return false;\r\n  }\r\n\r\n  return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\r\n}\r\n\r\n/**\r\n * Returns true if the browser supports PublicKeyCredential\r\n */\r\nexport function isBrowserSupported() {\r\n  if (\r\n    window.PublicKeyCredential === undefined ||\r\n    typeof window.PublicKeyCredential !== \"function\"\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Throws if browser does not support PublicKeyCredential\r\n */\r\nfunction checkSupport() {\r\n  if (!isBrowserSupported()) {\r\n    throw new Error(\r\n      \"WebAuthn and PublicKeyCredentials are not supported on this browser/device\"\r\n    );\r\n  }\r\n}\r\n\r\nconst coerceToArrayBuffer = function (thing) {\r\n  if (typeof thing === \"string\") {\r\n    // base64url to base64\r\n    thing = thing.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n\r\n    // base64 to Uint8Array\r\n    var str = window.atob(thing);\r\n    var bytes = new Uint8Array(str.length);\r\n    for (var i = 0; i < str.length; i++) {\r\n      bytes[i] = str.charCodeAt(i);\r\n    }\r\n    thing = bytes;\r\n  }\r\n\r\n  // Array to Uint8Array\r\n  if (Array.isArray(thing)) {\r\n    thing = new Uint8Array(thing);\r\n  }\r\n\r\n  // Uint8Array to ArrayBuffer\r\n  if (thing instanceof Uint8Array) {\r\n    thing = thing.buffer;\r\n  }\r\n\r\n  // error if none of the above worked\r\n  if (!(thing instanceof ArrayBuffer)) {\r\n    throw new TypeError(\"could not coerce to ArrayBuffer\");\r\n  }\r\n\r\n  return thing;\r\n};\r\n\r\nconst coerceToBase64Url = function (thing) {\r\n  // Array or ArrayBuffer to Uint8Array\r\n  if (Array.isArray(thing)) {\r\n    thing = Uint8Array.from(thing);\r\n  }\r\n\r\n  if (thing instanceof ArrayBuffer) {\r\n    thing = new Uint8Array(thing);\r\n  }\r\n\r\n  // Uint8Array to base64\r\n  if (thing instanceof Uint8Array) {\r\n    var str = \"\";\r\n    var len = thing.byteLength;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n      str += String.fromCharCode(thing[i]);\r\n    }\r\n    thing = window.btoa(str);\r\n  }\r\n\r\n  if (typeof thing !== \"string\") {\r\n    throw new Error(\"could not coerce to string\");\r\n  }\r\n\r\n  // base64 to base64url\r\n  // NOTE: \"=\" at the end of challenge is optional, strip it off here\r\n  thing = thing.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=*$/g, \"\");\r\n\r\n  return thing;\r\n};\r\n"],"names":["PasswordlessClient","[object Object]","apiUrl","apiKey","Origin","location","origin","RPID","hostname","config","this","token","regOptions","checkSupport","options","nickname","fidoOptions","session","newCredential","data","sessionId","registerBegin","e","console","error","challenge","coerceToArrayBuffer","user","id","excludeCredentials","map","c","authenticatorSelection","authenticatorAttachment","undefined","navigator","credentials","create","publicKey","warn","registerComplete","response","fetch","method","body","JSON","stringify","_params","headers","Accept","Content-Type","ApiKey","json","attestationObject","Uint8Array","clientDataJSON","rawId","coerceToBase64Url","type","extensions","getClientExtensionResults","AttestationObject","clientDataJson","username","signinBegin","credential","allowCredentials","forEach","listItem","get","signinComplete","res","authData","authenticatorData","sig","signature","async","isPlatformSupported","isBrowserSupported","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","window","Error","thing","replace","str","atob","bytes","length","i","charCodeAt","Array","isArray","buffer","ArrayBuffer","TypeError","from","len","byteLength","String","fromCharCode","btoa"],"mappings":"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"}