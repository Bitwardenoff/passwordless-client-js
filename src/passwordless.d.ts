import { AtLeast, PromiseResult, StepupRequest, TokenResponse } from './types';
export interface Config {
  apiUrl: string;
  apiKey: string;
  origin: string;
  rpid: string;
}
export declare class Client {
  private config;
  private _clientVersion;
  private abortController;
  constructor(config: AtLeast<Config, 'apiKey'>);
  /**
   * Register a new credential to a user
   *
   * @param {string} token Token generated by your backend and the Passwordless API
   * @param {string} credentialNickname A nickname for the passkey credential being created
   */
  register(token: string, credentialNickname?: string): PromiseResult<TokenResponse>;
  /**
   * Sign in a user using the userid
   * @param {string} userId
   * @returns
   */
  signinWithId(userId: string): PromiseResult<TokenResponse>;
  /**
   * Sign in a user using an alias
   * @param {string} alias
   * @returns a verify_token
   */
  signinWithAlias(alias: string): PromiseResult<TokenResponse>;
  /**
   * Sign in a user using autofill UI (a.k.a conditional) sign in
   * @returns a verify_token
   */
  signinWithAutofill(): PromiseResult<TokenResponse>;
  /**
   * Sign in a user using discoverable credentials
   * @returns a verify_token
   */
  signinWithDiscoverable(): PromiseResult<TokenResponse>;
  abort(): void;
  isPlatformSupported(): Promise<boolean>;
  isBrowserSupported(): boolean;
  isAutofillSupported(): Promise<boolean>;
  private registerBegin;
  private registerComplete;
  /**
   * Sign in a user
   *
   * @param {SigninMethod} Object containing either UserID or Alias
   * @returns
   */
  private signin;
  /**
   * Performs a step-up authentication process. This is essentially an overload for the sign-in workflow. It allows for
   * a user authentication to be given a purpose or context for the sign-in, enabling a "step-up" authentication flow.
   *
   * @param {StepupRequest} stepup - The step-up request object. This includes the sign-in method and the purpose of the authentication
   *
   * @returns {token} - The result of the step-up sign-in process.
   */
  stepup(stepup: StepupRequest): PromiseResult<TokenResponse>;
  private signinBegin;
  private signinComplete;
  private handleAbort;
  private assertBrowserSupported;
  private createHeaders;
  get clientVersionRegex(): RegExp;
  /**
   * (Internal use only) Sets the `Client-Version` header for client SDK implementations based off the Javascript Client SDK. By setting the
   * property, the parameter will be prepended.
   * @param {string} value The new `Client-Version` header value.
   * @throws {Error} Throws an error if the `Client-Version` has already been set.
   * @throws {Error} Throws an error if the `Client-Version` format is invalid. Expected format is 'prefix-x.x.x' where prefix is a lowercase string.
   * @remarks Do not set this property when integrating the client SDK.
   */
  set clientVersion(value: string);
  /**
   * Gets the `Client-Version` header for client SDK implementations based off the Javascript Client SDK.
   */
  get clientVersion(): string;
}
export declare function isPlatformSupported(): Promise<boolean>;
export declare function isBrowserSupported(): boolean;
export declare function isAutofillSupported(): Promise<boolean>;
